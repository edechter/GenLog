

:- ensure_loaded(experiment(number_words)).



num_preds(2).

pred(Index, Pred) :-
        num_preds(N), 
        between(1, N, Index),
        format(atom(Pred), "A(~w)", [Index]).

pred(Pred) :- pred(_, Pred).


lexeme(L) :-
        lexemes(Ls), 
        member(L, Ls).

lexemes(Ls) :- setof(L,
                     (
                      between(1, 20, N),
                      number_word(N, Ls),
                      member(L, Ls)),
                     Ls
                    ).
        


:- begin(genlog).

succ(X,Y) ---> 'A(1)'(X | Y), 'A(2)'(Y | []).

macro(
      ('?A'(XY| Z) @ [append(X, Y, XY)]---> '?B'(X | Z), '?C'(Y | Z))
     :-
     (pred('?A'),
      pred('?B'),
      pred('?C')
      )
     ).
macro(
      ('?A'(XY| Z) @ [append(X, Y, [XY])]---> '?B'(X | Z), '?C'(Y | X))
     :-
     (pred('?A'),
      pred('?B'),
      pred('?C')
      )
     ).
macro(
      ('?A'(XY| Z) @ [append(X, Y, [XY])]---> '?B'(Y | Z), '?C'(X | Y))
     :-
     (pred('?A'),
      pred('?B'),
      pred('?C')
      )
     ).

macro(
      ('?A'(X | UV) @ [append(U, V, UV)] ---> '?B'(X | U))
     :-
     (pred('?A'),
      pred('?B')
      )
     ).

macro(
      ('?A'(X| UV) @ [append(U, V, UV)] ---> '?B'(X | V))
     :-
     (pred('?A'),
      pred('?B')
      )
     ).
 
macro(
      ('?A'(X | Y))
     :-
     (pred('?A'),
      (X = []
      ;
       lexeme(L),
       X = [L]
      ),
      (Y = []
      ;
       lexeme(G),
       Y = [G])
      )
     ).


id(X | X) ---> true.
macro(
      ('?A'(X|Y) @ [X=Y] ---> id(X | Y) )
     :-
     (pred('?A'))
     ).


:- end(genlog).


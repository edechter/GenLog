
num_preds(phrase, 3).
num_preds(word, 3).
num_preds(syll, 3).
num_preds(cons, 3).
num_preds(vow,  3).


pred(Category, Index, Pred) :-
        num_preds(Category, N), 
        between(1, N, Index),
        format(atom(Pred), "A(~w, ~w)", [Category, Index]).

pred(Category, Pred) :- pred(Category, _, Pred).

syntax_category(phrase).
syntax_category(word).

category(phrase).
category(word).
category(syll).


from_cat(cons, X) :-
        consonant(X).
from_cat(vow, X) :-
        vowel(X).

lexeme(X) :-
        from_cat(cons, X)
        ;
        from_cat(vow, X).

:- begin(genlog).

hear(X) ---> 'A(phrase, 1)'(X|[]-[]).

%% within category rules
macro(
      ('?A'(Xi-Yf|Z) ---> '?B'(Xi-Yi | Z), '?C'(Yi-Yf | Xi-Yi))
     :-
     (pred(Cat, '?A'),
      pred(Cat, '?B'),
      pred(Cat, '?C'),
      syntax_category(Cat)
      )
     ).

% macro(
%       ('?A'(X-X|Z))
%      :-
%      (pred(Cat, '?A'),
%       syntax_category(Cat)
%       )
%      ).
 
 
%% phrase to word and word to syll rules
%% we don't use conditionals to impose modularity
macro(
      ('?A'(X-Z|Y) ---> '?B'(X-Z|Y))
     :-
     (pred(phrase, '?A'),
      pred(word, '?B'))
     ).

macro(
      ('?A'(X-Z|Y) ---> '?B'(X-Z|Y))
     :-
     (pred(word, '?A'),
      pred(syll, '?B'))
     ).
%%

% syll rules
macro(
      ('?A'([X, Y, Z|R] - R | C1-C2) --->
       '?B'(X|C1-C2),
       '?C'(Y|[X|C1]-C2),
       '?D'(Z|[Y, X|C1]-C2))
     :-
     (pred(syll, '?A'),
      pred(cons, '?B'),
      pred(vow,  '?C'),
      pred(cons, '?D'))
      ).

macro(
      ('?A'(X | [A|Y]-R) --->
       '?B'(X | Y-R)
      )
     :-
     (member(Cat, [cons, vow]),
      pred(Cat, '?A'),
      pred(Cat, '?B'),
      (consonant(A); vowel(A))
     )
     ).

macro(
      ('?A'(X | R-R))
     :-
     (member(Cat, [cons, vow]),
      pred(Cat, '?A'),
      from_cat(Cat, X)
     )
     ).

macro(
      ('?A'(X | [A|Y]-R))
     :-
     (member(Cat, [cons, vow]),
      pred(Cat, '?A'),
      pred(Cat, '?B'),
      from_cat(Cat, X),
      (consonant(A); vowel(A))
     )
     ).


:- end(genlog).
                            
                           
        
        
        


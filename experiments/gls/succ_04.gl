

:- ensure_loaded(experiment(number_words)).

num_preds(1, 4).
num_preds(2, 4).

pred(Type, Index, Pred) :-
        num_preds(Type, N), 
        between(1, N, Index),
        format(atom(Pred), "A(t=~w, i=~w)", [Type, Index]).

pred(Type, Pred) :- pred(Type, _, Pred).

preds(Type, As) :- maplist(call(pred, Type), As).


lexeme(L) :-
        lexemes(Ls), 
        member(L, Ls).


lexemes(Ls) :-
        setof(L,
              N^W^(
                   between(1, 99, N),
                   number_word(N, W),
                   member(L, W)
                  ;
                   L='START'),
              Ls
             ).


:- begin(genlog).

rule_group(
  macro(
        (succ(X,Y) ---> '?A'(X | ['START']), '?B'(Y | X))
       ,
        (preds(1, ['?A', '?B'])))
          ).
          
% conditioning on string of length > 1
rule_group(
   macro(
         ('?A'(XY| Z) @ [Z=[_, _|_]] ---> [append1d(X, Y, XY)] # '?B'(X | Z), '?C'(Y | Z))
        ,
        (pred(1, '?A'),
         pred(1, '?B'),
         pred(1, '?C')
        )
        ),
           
   macro(
         ('?A'(XY| Z) @ [Z=[_, _|_]] ---> [append1d(X, Y, XY)] # '?B'(X | Z), '?C'(Y | X))
        ,
        (pred(1, '?A'),
         pred(1, '?B'),
         pred(1, '?C')
        )
        ),
           
   macro(
         ('?A'(X | [U, W|V]) ---> '?B'(X | [U]))
        ,
        (
         pred(1, '?A'),
         pred(1, '?B')
        )
     ),
           
   macro(
         ('?A'(X| [U, W|V])  ---> '?B'(X | [W|V]))
        ,
        (pred(1, '?A'),
         pred(1, '?B')
        )
        )
          ).

% conditioning on string of length = 1
rule_group(
   macro(
         ('?A'(XY| Z) @ [Z=[_]] ---> [append1d(X, Y, XY)] # '?B'(X | Z), '?C'(Y | Z))
        ,
        (pred(1, '?A'),
         pred(1, '?B'),
         pred(1, '?C')
        )
        ),
           
   macro(
         ('?A'(XY| Z)  @ [Z=[_]]---> [append1d(X, Y, XY)] # '?B'(X | Z), '?C'(Y | X))
        ,
        (pred(1, '?A'),
         pred(1, '?B'),
         pred(1, '?C')
        )
        ),

   macro(
         ('?A'(X | Y) @ [Y=[_]] --->'?B'(X  | Y))
        ,
        (pred(1, '?A'),
         pred(2, '?B')
        )
        ),
  
           
   macro(
         ('?A'(X|Y) @ [Y=[_]] ---> id(X | Y) )
        ,
        (pred(1, '?A'))
        )
          ).

macro(
      (rule_group(
                 macro(
                       ('?A'(X | Y))
                      ,
                      (pred(2, '?A'),
                       lexeme(L),
                       X = [L]))))
     ,
     (
      lexeme(G),
      Y = [G]
     )
     ).

id(X | X) ---> true.


:- end(genlog).



